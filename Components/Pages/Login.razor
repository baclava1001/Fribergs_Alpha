@page "/login"
@using Fribergs_Alpha.Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using Fribergs_Alpha.Models
@using System.ComponentModel.DataAnnotations
@using System.ComponentModel

@inject UserAuthService AuthService
@inject NavigationManager NavigationManager


<h3>Login</h3>

<hr />

@if (!AuthResult.AuthSuccess)
{
    <span class="text-danger">@AuthResult.ErrorMessage</span>
}


<div class="row">
    <div class="col-md-4">

        <EditForm method="post" Model="Credentials" OnValidSubmit="UserLoginAsync" FormName="LoginUser" Enhance>
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="Email" class="form-label">
                    Email
                </label>
                <InputText @bind-Value="Credentials.Email" Placeholder="Email" class="form-control" />
                <ValidationMessage For="() => Credentials.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="Password" class="form-label">
                    Password
                </label>
                <InputText @bind-Value="Credentials.Password" Placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="() => Credentials.Password" />
            </div>
            <div>
                <button type="submit" class="btn btn-primary">Login</button>
            </div>

        </EditForm>
    </div>
</div>





@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    public LoginCredentials Credentials { get; set; } = new LoginCredentials();

    public AuthResult AuthResult { get; set; } = new AuthResult();



    public async Task UserLoginAsync()
    {
        AuthResult = AuthService.UserLogin(Credentials);

        if (AuthResult.AuthSuccess)
        {
            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, AuthResult.IdentityClaims);

            NavigationManager.NavigateTo(AuthResult.RedirectPath);
        }
    }

    // public async Task UserLogoutAsync()
    // {
    //     await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);

    //     NavigationManager.NavigateTo("/");
    // }


}
