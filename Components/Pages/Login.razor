@page "/login"
@using Fribergs_Alpha.Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using Fribergs_Alpha.Models

@inject UserAuthService AuthService
@inject NavigationManager NavigationManager


<h3>Login</h3>

@if (AuthResult.AuthSuccess)
{
    <span class="alert alert-danger">@AuthResult.ErrorMessage</span>
}

<EditForm method="post" OnSubmit="UserLoginAsync" Model="Credentials" FormName="LoginUser">
    <InputText @bind-Value="Credentials.Email" Placeholder="Email"></InputText>
    <InputText @bind-Value="Credentials.Password" Placeholder="Password"></InputText>
    <button type="submit">Login</button>
</EditForm>





@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    public LoginCredentials Credentials { get; set; } = new LoginCredentials();

    public AuthResult AuthResult { get; set; } = new AuthResult();



    public async Task UserLoginAsync()
    {
        var authResult = AuthService.UserLogin(Credentials);

        if (authResult.AuthSuccess)
        {
            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, authResult.IdentityClaims);

            NavigationManager.NavigateTo(authResult.RedirectPath);
        }
        else
        {
            // Print out authResult.ErrorMessage.
        }
    }

    public async Task UserLogoutAsync()
    {
        await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
       
        //NavigationManager.NavigateTo("/");
    }


}
