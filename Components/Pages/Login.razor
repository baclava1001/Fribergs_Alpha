@page "/login"
@inject UserAuthService AuthService
@inject IUserRepository UserRepository
@inject NavigationManager NavigationManager


<div class="container">
    <div class="row">


        <div class="col">
        </div>

        @* Login to account column *@
        <div class="col">

            <h3>Login</h3>
            <hr />

            @if (!AuthResult.AuthSuccess)
            {
                <span class="text-danger">@AuthResult.ErrorMessage</span>
            }

            <EditForm method="post" Model="Credentials" OnValidSubmit="UserLoginAsync" FormName="LoginUser" Enhance>
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label for="Email" class="form-label">
                        Email
                    </label>
                    <InputText @bind-Value="Credentials.Email" Placeholder="Email" class="form-control" />
                    <ValidationMessage For="() => Credentials.Email" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="Password" class="form-label">
                        Password
                    </label>
                    <InputText @bind-Value="Credentials.Password" Placeholder="Password" type="password" class="form-control" />
                    <ValidationMessage For="() => Credentials.Password" />
                </div>

                <div>
                    <button type="submit" class="btn btn-primary">Login</button>
                </div>

            </EditForm>
        </div>



        @* Create account column *@
        <div class="col">

            <h3>Create account</h3>

            <hr />

            <div class="row">
                <div class="col">

                    <EditForm method="post" Model="User" OnValidSubmit="CreateUserAndLoginAsync" FormName="CreateUser" Enhance>
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">
                                First name
                            </label>
                            <InputText @bind-Value="User.FirstName" placeholder="First name" class="form-control" />
                            <ValidationMessage For="() => User.FirstName" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">
                                Last name
                            </label>
                            <InputText @bind-Value="User.LastName" placeholder="Last name" class="form-control" />
                            <ValidationMessage For="() => User.LastName" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">
                                Adress
                            </label>
                            <InputText @bind-Value="User!.Address" placeholder="Adress" class="form-control" />
                            <ValidationMessage For="() => User.Address" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">
                                Email
                            </label>
                            <InputText @bind-Value="User.Email" placeholder="Email" class="form-control" />
                            <ValidationMessage For="() => User.Email" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">
                                Phone number
                            </label>
                            <InputText @bind-Value="User.PhoneNumber" placeholder="Phone number" class="form-control" />
                            <ValidationMessage For="() => User.PhoneNumber" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">
                                Password
                            </label>
                            <InputText @bind-Value="User.Password" placeholder="password" class="form-control" />
                            <ValidationMessage For="() => User.Password" class="text-danger" />
                        </div>

                        <div>
                            <button type="submit" class="btn btn-primary">Create</button>
                        </div>

                    </EditForm>
                </div>
            </div>
        </div>

        <div class="col">
        </div>

    </div>
</div>




@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "LoginUser")]
    public LoginCredentials Credentials { get; set; } = new LoginCredentials();

    [SupplyParameterFromForm(FormName = "CreateUser")]
    public User User { get; set; } = new User() { AdminRole = false };

    public AuthResult AuthResult { get; set; } = new AuthResult();


    public async Task UserLoginAsync()
    {
        AuthResult = AuthService.UserLogin(Credentials);

        if (AuthResult.AuthSuccess)
        {
            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, AuthResult.IdentityClaims);

            NavigationManager.NavigateTo(AuthResult.RedirectPath);
        }
    }

    public async Task CreateUserAndLoginAsync()
    {
        UserRepository.AddUser(User);

        Credentials.Email = User.Email;
        Credentials.Password = User.Password;

        await UserLoginAsync();
    }

}
