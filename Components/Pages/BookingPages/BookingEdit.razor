@page "/Bookings/edit"
@using Microsoft.EntityFrameworkCore
@using Fribergs_Alpha.Components
@inject Fribergs_Alpha.Data.IBooking bookingRepository
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Booking @Booking.BookingId</h4>
<hr />
@if (Booking is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Booking" OnValidSubmit="UpdateBooking" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Booking.BookingId" value="@Booking.BookingId" />
                @*BookingCalculator component: takes the pick up date and return date and recalculates the total sum accordingly*@
                <BookingCalculator Booking="@Booking"></BookingCalculator>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/bookings/all">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int BookingId { get; set; }

    [SupplyParameterFromForm]
    public Booking? Booking { get; set; }

    protected override void OnInitialized()
    {
        Booking ??= bookingRepository.GetBookingById(BookingId);

        if (Booking is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateBooking()
    {
        // DB.Attach(Booking!).State = EntityState.Modified;

        try
        {
            /* await DB.SaveChangesAsync(); */
            bookingRepository.UpdateBooking(Booking);
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BookingExists(Booking!.BookingId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/bookings");
    }

    bool BookingExists(int bookingid)
    {
        return bookingRepository.GetAllBookings().Any(e => e.BookingId == bookingid);
    }
}
