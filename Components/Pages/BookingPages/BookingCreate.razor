@page "/bookings/create"
@using System.Security.Claims
@inject Fribergs_Alpha.Data.IBooking bookingRepository
@inject Fribergs_Alpha.Data.ICar carRepository
@inject Fribergs_Alpha.Data.IUserRepository userRepository
@inject NavigationManager NavigationManager
@inject UserAuthService authService
@rendermode InteractiveServer

<PageTitle>Book car</PageTitle>

<h1>Booking</h1>
<h4>@Booking.Car.Brand @Booking.Car.CarModel (@Booking.Car.Year)</h4>
<div>
    <img src="@Booking.Car.CarPicUrl" alt="Picture of @Booking.Car.Brand @Booking.Car.CarModel" title="@Booking.Car.Brand @Booking.Car.CarModel" class="img-fluid" />
</div>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Booking" OnValidSubmit="AddBooking" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <input type="hidden" name="carid" value="carid" />
            <div class="col-8"
                <div class="mb-3">
                    <label for="firstname" class="form-label">Name:</label>
                    <InputText disabled id="firstname" @bind-Value="Booking.User.FirstName" class="form-control" />
                    <ValidationMessage For="() => Booking.User.FirstName" class="text-danger" />
                 </div>
                <div class="mb-3">
                    <InputText disabled id="lastname" @bind-Value="Booking.User.LastName" class="form-control" />
                    <ValidationMessage For="() => Booking.User.LastName" class="text-danger" />
                </div>
            </div>
            <div class="mb-3">
                <label for="pickupdate" class="form-label">PickUpDate:</label> 
                <input type="date" id="pickupdate" value="@Booking.PickUpDate.ToString("yyyy-MM-dd")" @onchange=UpdateTotalSumOnPickup class="form-control" />
                <ValidationMessage For="() => Booking.PickUpDate" class="text-danger" />
            </div>        
            <div class="mb-3">
                <label for="returndate" class="form-label">ReturnDate:</label> 
                <input type="date" id="returndate" value="@Booking.ReturnDate.ToString("yyyy-MM-dd")" @onchange=UpdateTotalSumOnReturn class="form-control" />
                <ValidationMessage For="() => Booking.ReturnDate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="totalsum" class="form-label">TotalSum:</label>
                <InputNumber disabled id="totalsum" @bind-Value="Booking.TotalSum" class="form-control" />
                <ValidationMessage For="() => Booking.TotalSum" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>
<AuthorizeView Policy="AdminRoleRequired">
    <Authorized>
        <div>
            <a href="/bookings/all">Back to List</a>
        </div>
    </Authorized>
</AuthorizeView>


@code {

    [SupplyParameterFromForm]
    public Booking Booking { get; set; } = new();

    // Get CarId from previous page
    [SupplyParameterFromQuery]
    public int CarId { get; set; }

    // Field variable to store user id
    private int _userId;


    protected override void OnInitialized()
    {
        // Retrieve car
        if (CarExists(CarId))
        {
            Booking.Car = carRepository.GetCarById(CarId);
        }
        else
        {
            NavigationManager.NavigateTo("notfound");
        }

        // Store user id, then retrieve user
        _userId = authService.GetUserIdAsync().Result;
        Booking.User = userRepository.GetUserById(_userId);

        Booking.TotalSum = 0;
        // Booking.PickUpDate = DateTime.Now;
        // Booking.ReturnDate = DateTime.Now;
    }

    bool CarExists(int carid)
    {
        return carRepository.GetAllCars().Any(e => e.CarId == carid);
    }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public void AddBooking()
    {
        bookingRepository.AddBooking(Booking);
        NavigationManager.NavigateTo($@"/bookings/details?bookingid={Booking.BookingId}");
    }

    private void UpdateTotalSumOnPickup(ChangeEventArgs e)
    {
        Booking.PickUpDate = DateTime.Parse(e.Value.ToString());
        double days = (Booking.ReturnDate - Booking.PickUpDate).Days;
        if (days > 0)
        {
            Booking.TotalSum = days * Booking.Car.PricePerDay;
        }
        else
        {
            Booking.TotalSum = 0;
        }
    }

    private void UpdateTotalSumOnReturn(ChangeEventArgs e)
    {
        Booking.ReturnDate = DateTime.Parse(e.Value.ToString());
        double days = (Booking.ReturnDate - Booking.PickUpDate).Days;
        if (days > 0)
        {
            Booking.TotalSum = days * Booking.Car.PricePerDay;
        }
        else
        {
            Booking.TotalSum = 0;
        }
    }
}