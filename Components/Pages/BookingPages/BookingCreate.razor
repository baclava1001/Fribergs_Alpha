@page "/bookings/create/{carid:int?}/{datefrom?}/{dateto?}"
@using System.Security.Claims
@inject Fribergs_Alpha.Data.IBooking bookingRepository
@inject Fribergs_Alpha.Data.ICar carRepository
@inject Fribergs_Alpha.Data.IUserRepository userRepository
@inject NavigationManager NavigationManager
@inject UserAuthService authService
@rendermode InteractiveServer

<PageTitle>Book car</PageTitle>

<h1>Create Booking</h1>
<hr />

<img src="@Booking.Car.CarPicUrl" alt="Picture of car" class="img-thumbnail" style="width: 350px; height: auto;" />
<br />
<br />
<dl>
    <dt class="col-sm-2">Car to rent:</dt>
    <dd class="col-sm-2">@Booking.Car.Brand @Booking.Car.CarModel (@Booking.Car.Year)</dd>
    <dt class="col-sm-2">Customers name:</dt>
    <dd class="col-sm-10">@Booking.User.FirstName @Booking.User.LastName</dd>
</dl>
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Booking" OnValidSubmit="AddBooking" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <input type="hidden" name="carid" value="carid" />
            @*BookingCalculator component: takes the pick up date and return date and recalculates the total sum accordingly*@
            <BookingCalculator Booking="@Booking"></BookingCalculator>
            <button type="submit" class="btn btn-primary">Book Now</button>
        </EditForm>
    </div>
</div>
<AuthorizeView Policy="AdminRoleRequired">
    <Authorized>
        <div>
            <a href="/bookings/all">Back to List</a>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    // Get CarId from previous page
    [Parameter]
    public int CarId { get; set; }

    // Get CarId from previous page
    [Parameter]
    public string? DateFrom { get; set; }

    // Get CarId from previous page
    [Parameter]
    public string? DateTo { get; set; }

    [SupplyParameterFromForm]
    public Booking Booking { get; set; } = new();

    // Field variable to store user id
    private int _userId;


    // protected override void OnInitialized()
    // {
    //     // Retrieve car
    //     if (CarExists(CarId))
    //     {
    //         Booking.Car = carRepository.GetCarById(CarId);
    //     }
    //     else
    //     {
    //         NavigationManager.NavigateTo("notfound");
    //     }

    //     // Store user id, then retrieve user
    //     _userId = authService.GetUserIdAsync().Result;
    //     Booking.User = userRepository.GetUserById(_userId);

    //     Booking.TotalSum = 0;
    // }

    // protected override void OnParametersSet()
    // {
    //     _userId = authService.GetUserIdAsync().Result;
    //     Booking.User = userRepository.GetUserById(_userId);
    //     Booking.Car = carRepository.GetCarById(CarId);

    //     if (DateFrom != null)
    //     {
    //         var pickupDate = DateTime.Parse(DateFrom!);
    //         var returnDate = DateTime.Parse(DateTo!);

    //         var days = (returnDate - pickupDate).TotalDays;
    //         var totalCost = Booking.Car.PricePerDay * days;

    //         Booking.PickUpDate = pickupDate;
    //         Booking.ReturnDate = returnDate;
    //         Booking.Car = carRepository.GetCarById(CarId);
    //         Booking.TotalSum = totalCost;
    //     }
    // }

    protected override void OnParametersSet()
    {
        // Retrieve user
        _userId = authService.GetUserIdAsync().Result;
        Booking.User = userRepository.GetUserById(_userId);

        // Retrieve car
        if (CarExists(CarId))
        {
            Booking.Car = carRepository.GetCarById(CarId);
        }
        else
        {
            NavigationManager.NavigateTo("notfound");
        }

        // Retrieve dates and total sum
        if (DateFrom != null)
        {
            var pickupDate = DateTime.Parse(DateFrom!);
            var returnDate = DateTime.Parse(DateTo!);

            var days = (returnDate - pickupDate).TotalDays;
            var totalCost = Booking.Car.PricePerDay * days;

            Booking.PickUpDate = pickupDate;
            Booking.ReturnDate = returnDate;
            Booking.TotalSum = totalCost;
        }
    }

    bool CarExists(int carid)
    {
        return carRepository.GetAllCars().Any(e => e.CarId == carid);
    }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public void AddBooking()
    {
        bookingRepository.AddBooking(Booking);
        NavigationManager.NavigateTo($@"/bookings/details?bookingid={Booking.BookingId}");
    }

    private void UpdateTotalSumOnPickup(ChangeEventArgs e)
    {
        Booking.PickUpDate = DateTime.Parse(e.Value.ToString());
        double days = (Booking.ReturnDate - Booking.PickUpDate).Days;
        if (days > 0)
        {
            Booking.TotalSum = days * Booking.Car.PricePerDay;
        }
        else
        {
            Booking.TotalSum = 0;
        }
    }

    private void UpdateTotalSumOnReturn(ChangeEventArgs e)
    {
        Booking.ReturnDate = DateTime.Parse(e.Value.ToString());
        double days = (Booking.ReturnDate - Booking.PickUpDate).Days;
        if (days > 0)
        {
            Booking.TotalSum = days * Booking.Car.PricePerDay;
        }
        else
        {
            Booking.TotalSum = 0;
        }
    }
}